import type { LogService } from './log.js';
import { type JsonValue } from 'type-fest';
import { type DelayService } from './delay.js';
export type LRUPoolManagerService<T, U extends JsonValue> = {
    create: (config: U) => Promise<T>;
    release: (item: T) => Promise<void>;
};
export type LRUPoolServiceConfig = {
    MAX_POOL_SIZE: number;
    POOL_TTL?: number;
};
export type LRUPoolServiceDependencies<T, U extends JsonValue> = LRUPoolServiceConfig & {
    poolManager: LRUPoolManagerService<T, U>;
    delay: DelayService;
    log?: LogService;
};
export type LRUPoolService<T, U extends JsonValue> = {
    use: (config: U) => Promise<T>;
};
export interface LRUPoolProvider<T, U extends JsonValue> {
    service: LRUPoolService<T, U>;
    dispose: () => Promise<void>;
}
declare const _default: typeof initLRUPool;
export default _default;
/**
 * Instantiate the LRU Pool service
 * @name initRandom
 * @function
 * @param  {Object}   services           The services to inject
 * @param  {Object}   [services.log = noop]     A logging function
 * @return {Promise<Function>}           A promise of the LRUPool service
 * @example
 * import {
 *   DEFAULT_LOGGER,
 *   initLog,
 *   initLRUPool
 * } from 'common-services';
 *
 * const log = await initLog({
 *   logger: DEFAULT_LOGGER,
 * });
 *
 * const random = await initLRUPool({
 *   MAX_POOL_SIZE: 50,
 *   poolManager: {
 *     // ...
 *   },
 *   log,
 * });
 */
export declare function initLRUPool<T, U extends JsonValue>({ MAX_POOL_SIZE, POOL_TTL, poolManager, delay, log, }: LRUPoolServiceDependencies<T, U>): Promise<{
    service: {
        use(config: U): Promise<T>;
    };
    dispose: () => Promise<void>;
}>;
